DECLARE FILTRO_PERIODO DATE DEFAULT /*'YYYY-MM-01'*/ <FILTRO_PERIODO>
;

-- BORRO REGISTROS PARA EVITAR DUPLICIDAD AL INSERTAR MISMO PERIODO VARIAS VECES
DELETE `meli-bi-data.SBOX_MKTVIS.P_CONTENT_REAL_ESTATE`
WHERE MESLISTING = FILTRO_PERIODO
;

-- COMIENZO DE INSERT
INSERT `meli-bi-data.SBOX_MKTVIS.P_CONTENT_REAL_ESTATE` 

-- PASO 0: TRAIGO CONTACTOS AGRUPADO MENSUALMENTE
WITH CONTACTOS AS
(
  SELECT  
      DATE_TRUNC(Fecha, MONTH) AS MESLISTING
    , SIT_SITE_ID
    , ITE_ITEM_ID
    , SUM(_Call + Whatsapp + Preguntas_unicos + Quotations_unicos + Presupuestos + Entregas) AS CONTACT

  FROM `meli-bi-data.SBOX_CLASSI_PLANNING.BT_VIBRANCY_TOTAL_SITES`

  WHERE DATE_TRUNC(Fecha, MONTH) = FILTRO_PERIODO 
    AND FRAUDE = 'N/A'

  GROUP BY 1,2,3
)

-- PASO 1: TRAIGO ITEMS CON SUS ATRIBUTOS PIVOTEADOS EN COLUMNAS
, ITEM_ATTRIBUTES_1 AS
(
SELECT
    SIT_SITE_ID
  , ITE_ITEM_PARENT_ITEM_ID AS ITE_PARENT_ITEM_ID
  , ITE_ITEM_ID
  , REGEXP_REPLACE(ITE_ITEM_DOM_DOMAIN_ID, '[A-Z]+.-','') AS ITE_ITEM_DOM_DOMAIN_ID
  , (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'OPERATION') AS OPERATION
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'TOTAL_AREA') AS TOTAL_AREA -- 72 m² 
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'COVERED_AREA') AS COVERED_AREA --67 m² 
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'PROPERTY_AGE') AS PROPERTY_AGE -- 0 años
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'PROPERTY_TYPE') AS PROPERTY_TYPE
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'BEDROOMS') AS BEDROOMS -- 2
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'FULL_BATHROOMS') AS FULL_BATHROOMS -- 1
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'ROOMS') AS ROOMS -- 3
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'FURNISHED') AS FURNISHED -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'PARKING_LOTS') AS PARKING_LOTS -- 0
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_BUSINESS_CENTER') AS HAS_BUSINESS_CENTER 
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_GYM') AS HAS_GYM -- No
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_LAUNDRY') AS HAS_LAUNDRY -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_COMMON_LAUNDRY') AS HAS_COMMON_LAUNDRY -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_HEATING') AS HAS_HEATING
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_MULTIPURPOSE_ROOM') AS HAS_MULTIPURPOSE_ROOM
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_TENNIS_COURT') AS HAS_TENNIS_COURT
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_AIR_CONDITIONING') AS HAS_AIR_CONDITIONING
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_FRONT_DESK') AS HAS_FRONT_DESK
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_GUEST_PARKING') AS HAS_GUEST_PARKING
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_JACUZZI') AS HAS_JACUZZI
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_PLAYGROUND') AS HAS_PLAYGROUND
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_INDOOR_FIREPLACE') AS HAS_INDOOR_FIREPLACE
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_PARTY_ROOM') AS HAS_PARTY_ROOM
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_SECURITY') AS HAS_SECURITY
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_SWIMMING_POOL') AS HAS_SWIMMING_POOL
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_BARBECUE_AREA') AS HAS_BARBECUE_AREA
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_GRILL') AS HAS_GRILL
	, (SELECT MAX(ITE_ITEM_SALES_TERMS.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_SALES_TERMS) AS ITE_ITEM_SALES_TERMS WHERE ITE_ITEM_SALES_TERMS.ID = 'IS_FINANCEABLE') AS IS_FINANCEABLE
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'WITH_VIRTUAL_TOUR') AS WITH_VIRTUAL_TOUR -- Sí

--atributos que no estaban en la anterior
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_BALCONY') AS HAS_BALCONY -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_GARDEN') AS HAS_GARDEN -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_TERRACE') AS HAS_TERRACE -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'MAINTENANCE_FEE') AS MAINTENANCE_FEE -- 11000 ARS (expensas)
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'APARTMENT_PROPERTY_SUBTYPE') AS APARTMENT_PROPERTY_SUBTYPE -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'BALCONY_AREA') AS BALCONY_AREA -- 10 m²
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'IS_SUITABLE_FOR_PETS') AS IS_SUITABLE_FOR_PETS -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'PETS_ALLOWED') AS PETS_ALLOWED -- Sí
	, (SELECT MAX(ITE_ITEM_ATTRIBUTES.VALUE_NAME) FROM UNNEST(A.ITE_ITEM_ATTRIBUTES) AS ITE_ITEM_ATTRIBUTES WHERE ITE_ITEM_ATTRIBUTES.ID = 'HAS_INTERNET_ACCESS') AS HAS_INTERNET_ACCESS -- No

FROM `meli-bi-data.WHOWNER.LK_ITE_ITEMS` AS A

)

-- PASO 2: CONVIERTO ALGUNOS ATRIBUTOS EN BOOLEANOS
, ITEM_ATTRIBUTES_2 AS

(
SELECT

    SIT_SITE_ID
  , ITE_PARENT_ITEM_ID
  , ITE_ITEM_ID
  , ITE_ITEM_DOM_DOMAIN_ID
	-- COMIENZO ATRIBUTOS
  , OPERATION
	, PROPERTY_TYPE
	, APARTMENT_PROPERTY_SUBTYPE
	, REGEXP_EXTRACT(PROPERTY_AGE,'[0-9]+') AS PROPERTY_AGE -- 0 años
	, (CASE WHEN REGEXP_EXTRACT(TOTAL_AREA,'[0-9]+') = '0' AND REGEXP_EXTRACT(COVERED_AREA,'[0-9]+') = '0' THEN NULL -- si ambas areas son 0 null
          WHEN REGEXP_EXTRACT(TOTAL_AREA,'[0-9]+') = '0' THEN REGEXP_EXTRACT(COVERED_AREA,'[0-9]+') -- si total area es 0, traeme la covered
          ELSE REGEXP_EXTRACT(TOTAL_AREA,'[0-9]+') END) AS TOTAL_AREA -- si no el valor original


	, (CASE WHEN REGEXP_EXTRACT(COVERED_AREA,'[0-9]+') = '0' AND REGEXP_EXTRACT(TOTAL_AREA,'[0-9]+') = '0' THEN NULL 
          WHEN REGEXP_EXTRACT(COVERED_AREA,'[0-9]+') = '0' THEN REGEXP_EXTRACT(TOTAL_AREA,'[0-9]+')
          ELSE REGEXP_EXTRACT(COVERED_AREA,'[0-9]+') END) AS COVERED_AREA



	, REGEXP_EXTRACT(BEDROOMS,'[0-9]+') AS BEDROOMS -- 2
	, CAST(LEFT(REGEXP_EXTRACT(MAINTENANCE_FEE,'[0-9]+'),10) AS NUMERIC) AS MAINTENANCE_FEE  
  , REGEXP_EXTRACT(UPPER(MAINTENANCE_FEE),'[A-Z]+') AS SIT_CURRENCY_MAINTENANCE_FEE
	, REGEXP_EXTRACT(FULL_BATHROOMS,'[0-9]+') AS FULL_BATHROOMS -- 1
	, REGEXP_EXTRACT(ROOMS,'[0-9]+') AS ROOMS -- 3
	, REGEXP_EXTRACT(PARKING_LOTS,'[0-9]+') AS PARKING_LOTS -- 0
	, REGEXP_EXTRACT(BALCONY_AREA,'[0-9]+') AS BALCONY_AREA -- 10 m²

-- BOOLEAN HAS_BALCONY
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_BALCONY), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BALCONY), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BALCONY), 'T.*') IS TRUE THEN 1
          WHEN HAS_BALCONY = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BALCONY), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_BALCONY), 'F.*') IS TRUE THEN 0
          WHEN HAS_BALCONY = '0' THEN 0
          ELSE NULL END) AS HAS_BALCONY
			
-- BOOLEAN FURNISHED
  , (CASE WHEN REGEXP_CONTAINS(UPPER(FURNISHED), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(FURNISHED), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(FURNISHED), 'T.*') IS TRUE THEN 1
          WHEN FURNISHED = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(FURNISHED), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(FURNISHED), 'F.*') IS TRUE THEN 0
          WHEN FURNISHED = '0' THEN 0
          ELSE NULL END) AS FURNISHED

-- BOOLEAN IS_FINANCEABLE
  , (CASE WHEN REGEXP_CONTAINS(UPPER(IS_FINANCEABLE), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(IS_FINANCEABLE), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(IS_FINANCEABLE), 'T.*') IS TRUE THEN 1
          WHEN IS_FINANCEABLE = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(IS_FINANCEABLE), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(IS_FINANCEABLE), 'F.*') IS TRUE THEN 0
          WHEN IS_FINANCEABLE = '0' THEN 0
          ELSE NULL END) AS IS_FINANCEABLE

-- BOOLEAN HAS_GRILL
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_GRILL), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GRILL), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GRILL), 'T.*') IS TRUE THEN 1
          WHEN HAS_GRILL = '1' THEN 1
					WHEN REGEXP_CONTAINS(UPPER(HAS_BARBECUE_AREA), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BARBECUE_AREA), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BARBECUE_AREA), 'T.*') IS TRUE THEN 1
          WHEN HAS_BARBECUE_AREA = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GRILL), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_GRILL), 'F.*') IS TRUE THEN 0
          WHEN HAS_GRILL = '0' THEN 0
					WHEN REGEXP_CONTAINS(UPPER(HAS_BARBECUE_AREA), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_BARBECUE_AREA), 'F.*') IS TRUE THEN 0
          WHEN HAS_BARBECUE_AREA = '0' THEN 0
          ELSE NULL END) AS HAS_GRILL

-- BOOLEAN HAS_GUEST_PARKING
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_GUEST_PARKING), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GUEST_PARKING), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GUEST_PARKING), 'T.*') IS TRUE THEN 1
          WHEN HAS_GUEST_PARKING = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GUEST_PARKING), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_GUEST_PARKING), 'F.*') IS TRUE THEN 0
          WHEN HAS_GUEST_PARKING = '0' THEN 0
          ELSE NULL END) AS HAS_GUEST_PARKING

-- BOOLEAN WITH_VIRTUAL_TOUR
  , (CASE WHEN REGEXP_CONTAINS(UPPER(WITH_VIRTUAL_TOUR), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(WITH_VIRTUAL_TOUR), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(WITH_VIRTUAL_TOUR), 'T.*') IS TRUE THEN 1
          WHEN WITH_VIRTUAL_TOUR = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(WITH_VIRTUAL_TOUR), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(WITH_VIRTUAL_TOUR), 'F.*') IS TRUE THEN 0
          WHEN WITH_VIRTUAL_TOUR = '0' THEN 0
          ELSE NULL END) AS WITH_VIRTUAL_TOUR

-- BOOLEAN HAS_JACUZZI
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_JACUZZI), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_JACUZZI), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_JACUZZI), 'T.*') IS TRUE THEN 1
          WHEN HAS_JACUZZI = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_JACUZZI), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_JACUZZI), 'F.*') IS TRUE THEN 0
          WHEN HAS_JACUZZI = '0' THEN 0
          ELSE NULL END) AS HAS_JACUZZI

-- BOOLEAN HAS_SWIMMING_POOL
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_SWIMMING_POOL), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SWIMMING_POOL), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SWIMMING_POOL), 'T.*') IS TRUE THEN 1
          WHEN HAS_SWIMMING_POOL = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SWIMMING_POOL), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_SWIMMING_POOL), 'F.*') IS TRUE THEN 0
          WHEN HAS_SWIMMING_POOL = '0' THEN 0
          ELSE NULL END) AS HAS_SWIMMING_POOL

-- BOOLEAN HAS_SECURITY
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_SECURITY), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SECURITY), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SECURITY), 'T.*') IS TRUE THEN 1
          WHEN HAS_SECURITY = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_SECURITY), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_SECURITY), 'F.*') IS TRUE THEN 0
          WHEN HAS_SECURITY = '0' THEN 0
          ELSE NULL END) AS HAS_SECURITY

-- BOOLEAN HAS_PARTY_ROOM
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_PARTY_ROOM), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_PARTY_ROOM), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_PARTY_ROOM), 'T.*') IS TRUE THEN 1
          WHEN HAS_PARTY_ROOM = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_PARTY_ROOM), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_PARTY_ROOM), 'F.*') IS TRUE THEN 0
          WHEN HAS_PARTY_ROOM = '0' THEN 0
          ELSE NULL END) AS HAS_PARTY_ROOM
        

-- BOOLEAN HAS_INDOOR_FIREPLACE
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_INDOOR_FIREPLACE), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INDOOR_FIREPLACE), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INDOOR_FIREPLACE), 'T.*') IS TRUE THEN 1
          WHEN HAS_INDOOR_FIREPLACE = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INDOOR_FIREPLACE), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_INDOOR_FIREPLACE), 'F.*') IS TRUE THEN 0
          WHEN HAS_INDOOR_FIREPLACE = '0' THEN 0
          ELSE NULL END) AS HAS_INDOOR_FIREPLACE
				
-- BOOLEAN HAS_FRONT_DESK
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_FRONT_DESK), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_FRONT_DESK), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_FRONT_DESK), 'T.*') IS TRUE THEN 1
          WHEN HAS_FRONT_DESK = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_FRONT_DESK), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_FRONT_DESK), 'F.*') IS TRUE THEN 0
          WHEN HAS_FRONT_DESK = '0' THEN 0
          ELSE NULL END) AS HAS_FRONT_DESK

-- BOOLEAN HAS_AIR_CONDITIONING
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_AIR_CONDITIONING), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_AIR_CONDITIONING), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_AIR_CONDITIONING), 'T.*') IS TRUE THEN 1
          WHEN HAS_AIR_CONDITIONING = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_AIR_CONDITIONING), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_AIR_CONDITIONING), 'F.*') IS TRUE THEN 0
          WHEN HAS_AIR_CONDITIONING = '0' THEN 0
          ELSE NULL END) AS HAS_AIR_CONDITIONING

-- BOOLEAN HAS_TENNIS_COURT
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_TENNIS_COURT), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TENNIS_COURT), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TENNIS_COURT), 'T.*') IS TRUE THEN 1
          WHEN HAS_TENNIS_COURT = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TENNIS_COURT), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_TENNIS_COURT), 'F.*') IS TRUE THEN 0
          WHEN HAS_TENNIS_COURT = '0' THEN 0
          ELSE NULL END) AS HAS_TENNIS_COURT

-- BOOLEAN HAS_MULTIPURPOSE_ROOM
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_MULTIPURPOSE_ROOM), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_MULTIPURPOSE_ROOM), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_MULTIPURPOSE_ROOM), 'T.*') IS TRUE THEN 1
          WHEN HAS_MULTIPURPOSE_ROOM = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_MULTIPURPOSE_ROOM), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_MULTIPURPOSE_ROOM), 'F.*') IS TRUE THEN 0
          WHEN HAS_MULTIPURPOSE_ROOM = '0' THEN 0
          ELSE NULL END) AS HAS_MULTIPURPOSE_ROOM

-- BOOLEAN HAS_HEATING
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_HEATING), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_HEATING), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_HEATING), 'T.*') IS TRUE THEN 1
          WHEN HAS_HEATING = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_HEATING), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_HEATING), 'F.*') IS TRUE THEN 0
          WHEN HAS_HEATING = '0' THEN 0
          ELSE NULL END) AS HAS_HEATING

-- BOOLEAN HAS_GYM
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_GYM), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GYM), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GYM), 'T.*') IS TRUE THEN 1
          WHEN HAS_GYM = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GYM), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_GYM), 'F.*') IS TRUE THEN 0
          WHEN HAS_GYM = '0' THEN 0
          ELSE NULL END) AS HAS_GYM

-- BOOLEAN HAS_BUSINESS_CENTER
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_BUSINESS_CENTER), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BUSINESS_CENTER), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BUSINESS_CENTER), 'T.*') IS TRUE THEN 1
          WHEN HAS_BUSINESS_CENTER = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_BUSINESS_CENTER), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_BUSINESS_CENTER), 'F.*') IS TRUE THEN 0
          WHEN HAS_BUSINESS_CENTER = '0' THEN 0
          ELSE NULL END) AS HAS_BUSINESS_CENTER

-- BOOLEAN HAS_INTERNET_ACCESS
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_INTERNET_ACCESS), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INTERNET_ACCESS), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INTERNET_ACCESS), 'T.*') IS TRUE THEN 1
          WHEN HAS_INTERNET_ACCESS = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_INTERNET_ACCESS), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_INTERNET_ACCESS), 'F.*') IS TRUE THEN 0
          WHEN HAS_INTERNET_ACCESS = '0' THEN 0
          ELSE NULL END) AS HAS_INTERNET_ACCESS

-- BOOLEAN HAS_LAUNDRY
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_LAUNDRY), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_LAUNDRY), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_LAUNDRY), 'T.*') IS TRUE THEN 1
          WHEN HAS_LAUNDRY = '1' THEN 1
					WHEN REGEXP_CONTAINS(UPPER(HAS_COMMON_LAUNDRY), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_COMMON_LAUNDRY), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_COMMON_LAUNDRY), 'T.*') IS TRUE THEN 1
          WHEN HAS_COMMON_LAUNDRY = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_LAUNDRY), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_LAUNDRY), 'F.*') IS TRUE THEN 0
          WHEN HAS_LAUNDRY = '0' THEN 0
					WHEN REGEXP_CONTAINS(UPPER(HAS_COMMON_LAUNDRY), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_COMMON_LAUNDRY), 'F.*') IS TRUE THEN 0
          WHEN HAS_COMMON_LAUNDRY = '0' THEN 0
          ELSE NULL END) AS HAS_LAUNDRY

-- BOOLEAN PETS_ALLOWED
  , (CASE WHEN REGEXP_CONTAINS(UPPER(PETS_ALLOWED), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(PETS_ALLOWED), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(PETS_ALLOWED), 'T.*') IS TRUE THEN 1
          WHEN PETS_ALLOWED = '1' THEN 1
					WHEN REGEXP_CONTAINS(UPPER(IS_SUITABLE_FOR_PETS), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(IS_SUITABLE_FOR_PETS), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(IS_SUITABLE_FOR_PETS), 'T.*') IS TRUE THEN 1
          WHEN IS_SUITABLE_FOR_PETS = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(PETS_ALLOWED), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(PETS_ALLOWED), 'F.*') IS TRUE THEN 0
          WHEN PETS_ALLOWED = '0' THEN 0
					WHEN REGEXP_CONTAINS(UPPER(IS_SUITABLE_FOR_PETS), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(IS_SUITABLE_FOR_PETS), 'F.*') IS TRUE THEN 0
          WHEN IS_SUITABLE_FOR_PETS = '0' THEN 0
          ELSE NULL END) AS PETS_ALLOWED

-- BOOLEAN HAS_TERRACE
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_TERRACE), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TERRACE), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TERRACE), 'T.*') IS TRUE THEN 1
          WHEN HAS_TERRACE = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_TERRACE), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_TERRACE), 'F.*') IS TRUE THEN 0
          WHEN HAS_TERRACE = '0' THEN 0
          ELSE NULL END) AS HAS_TERRACE


-- BOOLEAN HAS_GARDEN
  , (CASE WHEN REGEXP_CONTAINS(UPPER(HAS_GARDEN), 'S.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GARDEN), 'Y.*') IS TRUE THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GARDEN), 'T.*') IS TRUE THEN 1
          WHEN HAS_GARDEN = '1' THEN 1
          WHEN REGEXP_CONTAINS(UPPER(HAS_GARDEN), 'N.*') IS TRUE THEN 0
          WHEN REGEXP_CONTAINS(UPPER(HAS_GARDEN), 'F.*') IS TRUE THEN 0
          WHEN HAS_GARDEN = '0' THEN 0
          ELSE NULL END) AS HAS_GARDEN
		

FROM ITEM_ATTRIBUTES_1 AS ATT
)

--PASO 3: TRAIGO LA ULTIMA FOTO DEL ITEM MENSUAL Y ALGUNAS COLUMNAS EXTRA
, BT_LIVE_LISTINGS_CLASSIFIEDS AS
(
  SELECT 
      A.SIT_SITE_ID
    , DATE_TRUNC(A.TIM_DAY, MONTH) AS MESLISTING
    , A.ITE_ITEM_ID
    , A.TIM_DAY
    , A.ITE_ITEM_TITLE
    , A.CUS_CUST_ID_SEL
    , REGEXP_EXTRACT(A.SIT_CURRENCY_ID,'[A-Z]+') AS SIT_CURRENCY_ID
    , A.ITE_CURRENT_PRICE
    , A.ITE_AUCTION_START_DATETIME
    , A.ITE_AUCTION_STOP_DATETIME
    , A.ITE_TIPO_PROD
    , CAT.CAT_CATEG_ID_L1
    , CAT.CAT_CATEG_NAME_L1
    , CAT.CAT_CATEG_ID_L2
    , CAT.CAT_CATEG_NAME_L2
    , CAT.CAT_CATEG_ID_L3
    , CAT.CAT_CATEG_NAME_L3
    , CAT.CAT_CATEG_ID_L4
    , CAT.CAT_CATEG_NAME_L4
    , CAT.CAT_CATEG_ID_L7
    , DEALER.DEALER_TYPE_GROUP_DESC
		, LOC.ITE_ADD_STREET
		, LOC.ITE_ADD_CITY_NAME
		, LOC.ITE_ADD_STATE_NAME
		, LOC.ITE_ADD_NEIGHBORHOOD_NAME
		, LOC.ITE_ADD_LATITUDE
		, LOC.ITE_ADD_LONGITUDE
    , C.CBO_DESCRIPTION_CLASSI



  FROM `meli-bi-data.WHOWNER.BT_LIVE_LISTINGS_CLASSIFIEDS` AS A

  -- LE AGREGO CATEGORY NAME
  LEFT JOIN `meli-bi-data.WHOWNER.AG_LK_CAT_CATEGORIES` AS CAT 
	ON    CAT.CAT_CATEG_ID_L7 = CAST(A.CAT_CATEG_ID_L7 AS INTEGER)
		AND CAT.SIT_SITE_ID = A.SIT_SITE_ID

  -- LE AGREGO TIPO DE CUSOMTER: FSBO, DEALER, ETC
  LEFT JOIN `meli-bi-data.WHOWNER.LK_CUS_DEALER_TYPES_GROUP` AS DEALER
	  ON A.cns_concesionario_flag = DEALER.dealer_type_id

  -- TRAIGO TIPO DE PUBLICACION: GRATIS, ORO, ETC
  LEFT JOIN `meli-bi-data.WHOWNER.LK_CBO_COMBOS_CLASSIFIEDS` AS C 
  ON A.CBO_COMBO_CLASSI_ID = C.CBO_COMBO_CLASSI_ID -- lo uno con la foreign key para evitar duplicar datos


	-- LE AGREGO DATOS DE LOCATION
	LEFT JOIN 
	(
	SELECT 	
				SIT_SITE_ID
			, ITE_ITEM_ID
			, ITE_ADD_STREET
			, ITE_ADD_CITY_NAME
			, ITE_ADD_STATE_NAME
			, ITE_ADD_NEIGHBORHOOD_NAME
			, ITE_ADD_LATITUDE
			, ITE_ADD_LONGITUDE

		FROM `meli-bi-data.WHOWNER.LK_ITE_ITEM_ADDRESS`
		
		QUALIFY ROW_NUMBER() OVER (PARTITION BY SIT_SITE_ID, ITE_ITEM_ID ORDER BY AUD_INS_DT DESC) = 1

	) AS LOC
	ON A.SIT_SITE_ID = LOC.SIT_SITE_ID
	AND A.ITE_ITEM_ID = LOC.ITE_ITEM_ID


  WHERE DATE_TRUNC(A.TIM_DAY, MONTH) = FILTRO_PERIODO
    AND A.SIT_SITE_ID IN ('MCO','MLA','MLB','MLC','MLM','MLU','MLV')
    AND CAT.CAT_CATEG_ID_L1 = 1459

    -- INICIO FILTRO DE ITEMS FRAUDE
    AND (
            NOT EXISTS
                      (
                        SELECT 1

                        FROM `meli-bi-data.WHOWNER.LK_ITE_ITEMS` AS FRAUDE_1
                        WHERE ITE_ITEM_FRAUD_PREVENT_STATUS LIKE '%for_prevention'
                          AND FRAUDE_1.SIT_SITE_ID = A.SIT_SITE_ID
                          AND FRAUDE_1.ITE_ITEM_ID = A.ITE_ITEM_ID
                      )

        OR NOT EXISTS
                      (
                        SELECT 1

                        FROM `meli-bi-data.SBOX_CLASSI_PLANNING.LK_SCORINNG_ITEMS` AS FRAUDE_2
                        WHERE marca_tko = 'confirmado_rm'
                          AND FRAUDE_2.SIT_SITE_ID = A.SIT_SITE_ID
                          AND FRAUDE_2.ITEM_ID = A.ITE_ITEM_ID
                      )
                      
        OR NOT EXISTS
                      (
                        SELECT 1

                        FROM `meli-bi-data.WHOWNER.LK_CUS_CUSTOMERS_DATA` AS FRAUDE_3
                        WHERE cus_cust_verif_id IN ('PREV_INHAB_PERM', 'MOD_INHAB_PERM', 'TKO', 'PAUSA_TOTAL','PAUSA_IV', 'IV')
                          AND FRAUDE_3.SIT_SITE_ID_CUS = A.SIT_SITE_ID
                          AND FRAUDE_3.CUS_CUST_ID = A.CUS_CUST_ID_SEL 
                      )
        )
    -- FIN FILTRO DE ITEMS FRAUDE
	
  QUALIFY ROW_NUMBER() OVER (PARTITION BY A.SIT_SITE_ID,DATE_TRUNC(A.TIM_DAY, MONTH), A.ITE_ITEM_ID ORDER BY A.TIM_DAY DESC) = 1

)

-- PASO 4: LE AGREGO VISITAS Y SHOW_PHONE AL PASO 3
, BT_LIVE_LISTINGS_CLASSIFIEDS_CON_VISITAS AS

(
  SELECT A.*
    , B.VISIT
    , B.VISIT_STD_DESKTOP
    , B.VISIT_IOS
    , B.VISIT_ANDROID
    , B.VISIT_MOBILE_WEB
    , C.SHOW_PHONE

  FROM BT_LIVE_LISTINGS_CLASSIFIEDS AS A

  LEFT JOIN 
          (
          SELECT
              DATE_TRUNC(TIM_DAY, MONTH) AS MesListing
            , CAT_CATEG_ID_L1
            , SIT_SITE_ID
            , ITE_ITEM_ID
            , SUM (QTY_VISITS) AS VISIT
            , SUM(CASE WHEN UPPER(DEVICE) = 'STD_DESKTOP' THEN QTY_VISITS END) AS VISIT_STD_DESKTOP
            , SUM(CASE WHEN UPPER(DEVICE) = 'IOS' THEN QTY_VISITS END) AS VISIT_IOS
            , SUM(CASE WHEN UPPER(DEVICE) = 'ANDROID' THEN QTY_VISITS END) AS VISIT_ANDROID
            , SUM(CASE WHEN UPPER(DEVICE) = 'MOBILE-WEB' THEN QTY_VISITS END) AS VISIT_MOBILE_WEB

          FROM `meli-bi-data.WHOWNER.BT_VISITS`

          WHERE CAT_CATEG_ID_L1 = '1459'
            AND SIT_SITE_ID IN ('MCO','MLA','MLB','MLC','MLM','MLU','MLV')
            AND DATE_TRUNC(TIM_DAY, MONTH) = FILTRO_PERIODO

          GROUP BY 1,2,3,4
          ) AS B
  ON    A.SIT_SITE_ID = B.SIT_SITE_ID
    AND A.ITE_ITEM_ID = B.ITE_ITEM_ID
    AND A.MESLISTING = B.MESLISTING

LEFT JOIN 
          (
          SELECT
              DATE_TRUNC(TIM_DAY, MONTH) AS MesListing
            , CAT_CATEG_ID_L1
            , SIT_SITE_ID
            , ITE_ITEM_ID
	          , SUM(QTY_VIEW_PHONE) AS SHOW_PHONE

	        FROM `meli-bi-data.WHOWNER.BT_CONTACTS_CLASSIFIEDS`

          WHERE CAT_CATEG_ID_L1 = '1459'
            AND SIT_SITE_ID IN ('MCO','MLA','MLB','MLC','MLM','MLU','MLV')
            AND DATE_TRUNC(TIM_DAY, MONTH) = FILTRO_PERIODO

          GROUP BY 1,2,3,4
          ) AS C 
  ON    A.SIT_SITE_ID = C.SIT_SITE_ID
    AND A.ITE_ITEM_ID = C.ITE_ITEM_ID
    AND A.MESLISTING = C.MESLISTING

)

, BT_LIVE_LISTINGS_CLASSIFIEDS_CON_PRECIOS_EN_USD_Y_LOCAL AS

(
-- PASO 5: JOINEO PASO 2 Y 5 (ITEMS CON VISITAS + ATRIBUTOS), Y LES CREO COLUMNAS DE PRECIO LOCAL Y EN USD A ITEM Y LAS EXPENSAS
SELECT A.*, B.* EXCEPT(SIT_SITE_ID, ITE_ITEM_ID)

--SIT_CURRENCY_MAINTENANCE_FEE
  , (CASE WHEN REGEXP_EXTRACT(A.SIT_CURRENCY_ID,'[A-Z]+') <> 'DOL' THEN ITE_CURRENT_PRICE 
          WHEN REGEXP_EXTRACT(A.SIT_CURRENCY_ID,'[A-Z]+') = 'DOL' THEN SAFE_MULTIPLY(ITE_CURRENT_PRICE , TC.CCO_TC_VALUE)
          ELSE NULL END) AS PRECIO_LOCAL
  , (CASE WHEN REGEXP_EXTRACT(A.SIT_CURRENCY_ID,'[A-Z]+') = 'DOL' THEN ITE_CURRENT_PRICE 
          WHEN REGEXP_EXTRACT(A.SIT_CURRENCY_ID,'[A-Z]+') <> 'DOL' THEN SAFE_DIVIDE(ITE_CURRENT_PRICE , TC.CCO_TC_VALUE)
          ELSE NULL END) AS PRECIO_USD

  , (CASE WHEN B.SIT_CURRENCY_MAINTENANCE_FEE <> 'DOL' THEN MAINTENANCE_FEE 
          WHEN B.SIT_CURRENCY_MAINTENANCE_FEE = 'DOL' THEN SAFE_MULTIPLY(MAINTENANCE_FEE , TC.CCO_TC_VALUE)
          ELSE NULL END) AS EXPENSAS_LOCAL
  , (CASE WHEN B.SIT_CURRENCY_MAINTENANCE_FEE = 'DOL' THEN MAINTENANCE_FEE 
          WHEN B.SIT_CURRENCY_MAINTENANCE_FEE <> 'DOL' THEN SAFE_DIVIDE(MAINTENANCE_FEE , TC.CCO_TC_VALUE)
          ELSE NULL END) AS EXPENSAS_USD

  , C.CONTACT
  , CURRENT_TIMESTAMP() AS AUD_TIMESTAMP

FROM BT_LIVE_LISTINGS_CLASSIFIEDS_CON_VISITAS AS A


LEFT JOIN ITEM_ATTRIBUTES_2 AS B
ON A.SIT_SITE_ID = B.SIT_SITE_ID
AND A.ITE_ITEM_ID = B.ITE_ITEM_ID

-- LE AGREGO TASA DE CAMBIO PARA COLUMNAS DE PRECIO_LOCAL PRECIO_USD
LEFT JOIN `meli-bi-data.WHOWNER.LK_CURRENCY_CONVERTION` AS TC
ON A.SIT_SITE_ID = TC.SIT_SITE_ID
  AND A.TIM_DAY	= TC.TIM_DAY_TC

LEFT JOIN CONTACTOS AS C
ON A.MESLISTING = C.MESLISTING
AND A.SIT_SITE_ID = C.SIT_SITE_ID
AND A.ITE_ITEM_ID = C.ITE_ITEM_ID

)

-- LE CREO LOS PRECIOS EN METROS CUADRADOS A TOTAL_AREA Y COVERED_AREA EN PRECIO LOCAL Y EN USD
, BT_LIVE_LISTINGS_CLASSIFIEDS_CON_ATRIBUTOS AS

(
SELECT A.*
, SAFE_DIVIDE( CAST(PRECIO_LOCAL AS NUMERIC), CAST(LEFT(TOTAL_AREA,10) AS NUMERIC)) AS TOTAL_M2_LOCAL 
, SAFE_DIVIDE( CAST(PRECIO_LOCAL AS NUMERIC), CAST(LEFT(COVERED_AREA,10) AS NUMERIC)) AS COVERED_M2_LOCAL
, SAFE_DIVIDE( CAST(PRECIO_USD AS NUMERIC), CAST(LEFT(TOTAL_AREA,10) AS NUMERIC)) AS TOTAL_M2_USD
, SAFE_DIVIDE( CAST(PRECIO_USD AS NUMERIC), CAST(LEFT(COVERED_AREA,10) AS NUMERIC)) AS COVERED_M2_USD


FROM BT_LIVE_LISTINGS_CLASSIFIEDS_CON_PRECIOS_EN_USD_Y_LOCAL AS A

)

SELECT 
  AUD_TIMESTAMP
, MESLISTING
, SIT_SITE_ID
, CUS_CUST_ID_SEL
, DEALER_TYPE_GROUP_DESC
, ITE_PARENT_ITEM_ID
, ITE_ITEM_ID
, CBO_DESCRIPTION_CLASSI
, VISIT
, VISIT_STD_DESKTOP
, VISIT_IOS
, VISIT_ANDROID
, VISIT_MOBILE_WEB
, SHOW_PHONE
, CONTACT
, ITE_AUCTION_START_DATETIME
, ITE_AUCTION_STOP_DATETIME
, TIM_DAY
, ITE_ITEM_TITLE
, SIT_CURRENCY_ID
, ITE_CURRENT_PRICE
, PRECIO_LOCAL
, TOTAL_M2_LOCAL
, COVERED_M2_LOCAL
, PRECIO_USD
, TOTAL_M2_USD
, COVERED_M2_USD
, CAT_CATEG_ID_L1
, CAT_CATEG_NAME_L1
, CAT_CATEG_ID_L2
, CAT_CATEG_NAME_L2
, CAT_CATEG_ID_L3
, CAT_CATEG_NAME_L3
, CAT_CATEG_ID_L4
, CAT_CATEG_NAME_L4
, CAT_CATEG_ID_L7
, ITE_ITEM_DOM_DOMAIN_ID
, ITE_ADD_STATE_NAME
, ITE_ADD_CITY_NAME
, ITE_ADD_NEIGHBORHOOD_NAME
, ITE_ADD_STREET
, ITE_ADD_LATITUDE
, ITE_ADD_LONGITUDE
, ITE_TIPO_PROD
, OPERATION
, PROPERTY_TYPE
, APARTMENT_PROPERTY_SUBTYPE
, CAST(LEFT(PROPERTY_AGE,10) AS NUMERIC) AS PROPERTY_AGE
, CAST(LEFT(TOTAL_AREA,10) AS NUMERIC) AS TOTAL_AREA
, CAST(LEFT(COVERED_AREA,10) AS NUMERIC) AS COVERED_AREA
, CAST(LEFT(BEDROOMS,10) AS NUMERIC) AS BEDROOMS
, CONCAT(MAINTENANCE_FEE,' ', SIT_CURRENCY_MAINTENANCE_FEE) AS MAINTENANCE_FEE
, CAST(EXPENSAS_LOCAL AS NUMERIC) AS EXPENSAS_LOCAL
, CAST(EXPENSAS_USD AS NUMERIC) AS EXPENSAS_USD
, CAST(LEFT(FULL_BATHROOMS,10) AS NUMERIC) AS FULL_BATHROOMS
, CAST(LEFT(ROOMS,10) AS NUMERIC) AS ROOMS
, CAST(LEFT(PARKING_LOTS,10) AS NUMERIC) AS PARKING_LOTS
, CAST(LEFT(BALCONY_AREA,10) AS NUMERIC) AS BALCONY_AREA
, CAST(HAS_BALCONY AS NUMERIC) AS HAS_BALCONY
, CAST(FURNISHED AS NUMERIC) AS FURNISHED
, CAST(IS_FINANCEABLE AS NUMERIC) AS IS_FINANCEABLE
, CAST(HAS_GRILL AS NUMERIC) AS HAS_GRILL
, CAST(HAS_GUEST_PARKING AS NUMERIC) AS HAS_GUEST_PARKING
, CAST(WITH_VIRTUAL_TOUR AS NUMERIC) AS WITH_VIRTUAL_TOUR
, CAST(HAS_JACUZZI AS NUMERIC) AS HAS_JACUZZI
, CAST(HAS_SWIMMING_POOL AS NUMERIC) AS HAS_SWIMMING_POOL
, CAST(HAS_SECURITY AS NUMERIC) AS HAS_SECURITY
, CAST(HAS_PARTY_ROOM AS NUMERIC) AS HAS_PARTY_ROOM
, CAST(HAS_INDOOR_FIREPLACE AS NUMERIC) AS HAS_INDOOR_FIREPLACE
, CAST(HAS_FRONT_DESK AS NUMERIC) AS HAS_FRONT_DESK
, CAST(HAS_AIR_CONDITIONING AS NUMERIC) AS HAS_AIR_CONDITIONING
, CAST(HAS_TENNIS_COURT AS NUMERIC) AS HAS_TENNIS_COURT
, CAST(HAS_MULTIPURPOSE_ROOM AS NUMERIC) AS HAS_MULTIPURPOSE_ROOM
, CAST(HAS_HEATING AS NUMERIC) AS HAS_HEATING
, CAST(HAS_BUSINESS_CENTER AS NUMERIC) AS HAS_BUSINESS_CENTER
, CAST(HAS_GYM AS NUMERIC) AS HAS_GYM
, CAST(HAS_INTERNET_ACCESS AS NUMERIC) AS HAS_INTERNET_ACCESS
, CAST(HAS_LAUNDRY AS NUMERIC) AS HAS_LAUNDRY
, CAST(PETS_ALLOWED AS NUMERIC) AS PETS_ALLOWED
, CAST(HAS_TERRACE AS NUMERIC) AS HAS_TERRACE
, CAST(HAS_GARDEN AS NUMERIC) AS HAS_GARDEN

FROM BT_LIVE_LISTINGS_CLASSIFIEDS_CON_ATRIBUTOS
;
